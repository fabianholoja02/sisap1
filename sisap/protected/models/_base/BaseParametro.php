<?php

/**
 * This is the model base class for the table "parametro".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Parametro".
 *
 * Columns in table "parametro" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $ID
 * @property string $DESCRIPCION
 * @property string $VALOR
 * @property string $VALOR_MIN
 * @property string $VALOR_MAX
 * @property integer $ESTADO
 * @property integer $TIPO_CALCULO
 * 
 */
abstract class BaseParametro extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'parametro';
    }

    public static function representingColumn() {
        return 'DESCRIPCION';
    }

    public function rules() {
        return array(
            array('DESCRIPCION', 'required'),
            array('ESTADO, TIPO_CALCULO', 'numerical', 'integerOnly'=>true),
            array('DESCRIPCION', 'length', 'max'=>100),
            array('VALOR, VALOR_MIN, VALOR_MAX', 'length', 'max'=>6),
            array('VALOR, VALOR_MIN, VALOR_MAX, ESTADO, TIPO_CALCULO', 'default', 'setOnEmpty' => true, 'value' => null),
            array('ID, DESCRIPCION, VALOR, VALOR_MIN, VALOR_MAX, ESTADO, TIPO_CALCULO', 'safe', 'on'=>'search'),
            array('ID, DESCRIPCION, VALOR, VALOR_MIN, VALOR_MAX, ESTADO, TIPO_CALCULO', 'safe', 'on'=>'searchTarifa'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'ID' => Yii::t('app', 'ID'),
                'DESCRIPCION' => Yii::t('app', 'Descripción'),
                'VALOR' => Yii::t('app', 'Valor'),
                'VALOR_MIN' => Yii::t('app', 'Valor mínimo'),
                'VALOR_MAX' => Yii::t('app', 'Valor máximo'),
                'TIPO_CALCULO' => Yii::t('app', 'El valor sera:'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('ID', $this->ID, true);
        $criteria->compare('DESCRIPCION', $this->DESCRIPCION, true);
        $criteria->compare('VALOR', $this->VALOR, true);
        $criteria->compare('VALOR_MIN', $this->VALOR_MIN, true);
        $criteria->compare('VALOR_MAX', $this->VALOR_MAX, true);
        $criteria->compare('ESTADO', $this->ESTADO);
        $criteria->compare('TIPO_CALCULO', $this->TIPO_CALCULO);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

      public function searchTarifa() {
        $criteria = new CDbCriteria;

        $criteria->compare('ID', $this->ID, true);
        $criteria->compare('DESCRIPCION', 'CONSUMO DE AGUA POTABLE', true);
        $criteria->compare('VALOR', $this->VALOR, true);
        $criteria->compare('VALOR_MIN', $this->VALOR_MIN, true);
        $criteria->compare('VALOR_MAX', $this->VALOR_MAX, true);
        $criteria->compare('ESTADO', 1); // esta activo

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort'=>array(
                 'defaultOrder'=>'VALOR_MIN asc',
               ),
        ));
    }
    
     public function searchComunidad() {
        $criteria = new CDbCriteria;

        $criteria->compare('ID', $this->ID, true);
       // $criteria->compare('DESCRIPCION', 'CONSUMO DE AGUA POTABLE', true);
        $criteria->compare('VALOR', $this->VALOR, true);
        $criteria->compare('VALOR_MIN', $this->VALOR_MIN, true);
        $criteria->compare('VALOR_MAX', $this->VALOR_MAX, true);
        $criteria->compare('ESTADO', 5); // Rubro: Servicios comunitarios

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort'=>array(
                 'defaultOrder'=>'VALOR_MIN asc',
               ),
        ));
    }
    
    
    
    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}