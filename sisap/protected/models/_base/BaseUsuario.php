<?php

/**
 * This is the model base class for the table "Usuario".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Usuario".
 *
 * Columns in table "Usuario" available as properties of the model,
 * followed by relations of table "Usuario" available as properties of the model.
 *
 * @property string $id
 * @property string $username
 * @property string $password
 * @property string $nombres
 * @property string $email
 * @property string $telefono
 * @property string $direccion
 * @property string $foto
 * @property integer $id_referencia
 * @property string $Rol
 * @property string $codigo_barra
 * @property string $descripcion
 * @property string $validador_pass
 *
 * @property Prestamo[] $prestamos
 * @property Reserva[] $reservas
 * @property Rol $rol
 */
abstract class BaseUsuario extends AweActiveRecord {

    /*Funciones para determinar si es administrador*/
    public $updateType;
     public function esAdministrador() {
        if ($this->rol->Rol == 'Administrador') /*and $this->estado == '1')           */
        {    return true;}
        else
        {
        return false;
        }
        }
        
        
             public function esAdministradorSecretaria() {
        if ($this->rol->Rol == 'Administrador' or $this->rol->Rol == 'Secretaria') /*and $this->estado == '1')           */
        {    return true;}
        else
        {
        return false;
        }
          }
               
        /*Funciones para determinar si es Medico*/
    
        public function esSecretaria() {
        if ($this->rol->Rol == 'Secretaria') /*and $this->estado == '1')           */
        {    return true;}
        else
        {
        return false;
        }
        }
        /*Funciones para determinar si es administrador*/
    
      /*Funciones para no permitir a nadie*/
     public function esNadie() {
        if ($this->rol->Rol == 'Nadie')           
        {    return true;}
        else
        {
        return false;
        }
        }
         public function NombreFoto() {
//             if ($this->foto==null or $this->foto=='')
//             {
//                 $nombreF='';
//             }
//             else
//             {
                 $nombreF=$this->foto;       
//             }
            return $nombreF;
       
        }
           
     /* FUNCION PARA LOGUEAR DESDE LA BD */
    public function validatePassword($password) {
        Yii::app()->getSession()->add('tipo_usu', $this->rol->Rol); //Aumentado para asignar el tipo al usuario session
        Yii::app()->getSession()->add('id_usu', $this->id); //pk del usuario
        Yii::app()->getSession()->add('nombre_usuario', $this->nombres); //nombre del usuario
        Yii::app()->getSession()->add('id_referencia', $this->id_referencia); //nombre del usuario
        Yii::app()->getSession()->add('foto', $this->foto); //foto del usuario
        Yii::app()->getSession()->add('bandera_audio', 1); //foto del usuario
         return $this->hashPassword($password) === $this->password;        
    }
    public function hashPassword($password) {
        return md5($password);
    }

    /*     * FUNCIONES POR DEFECTO

     */
    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'usuario';
    }

    public static function representingColumn() {
        return 'username';
    }
     public static function representingColumnNombres() {
        return 'nombres';
    }

    public function rules() {
        return array(
            array('username, password, Rol', 'required'),
            array('id_referencia', 'numerical', 'integerOnly'=>true),
            array('username', 'length', 'max'=>50),
            array('telefono', 'length', 'max'=>15),
            array('password, validador_pass, nombres, codigo_barra', 'length', 'max'=>100),
            array('email, direccion', 'length', 'max'=>250),
            array('foto', 'length', 'max'=>200),
            array('Rol', 'length', 'max'=>11),
            array('descripcion', 'length', 'max'=>500),
            array('nombres, email, telefono, direccion, foto, id_referencia, codigo_barra', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, username, password, nombres, email, telefono, direccion, foto, id_referencia, Rol, codigo_barra, descripcion', 'safe', 'on'=>'search'),
            array('username','unique', 'message'=>"El nombre de usuario (username) debe ser único, este usuario ya tiene una cuenta en el sistema"),
             array('email','email', 'message'=>"No es un correo electrónico válido"),
            //Validar que dos campos sean iguales (por ejemplo, cuando se crea una clave y hay que ingresarla 2 veces)
            array('validador_pass', 'compare', 'compareAttribute'=>'password', 'operator'=>'=', 'message'=>'Debe repetir la clave exactamente igual'),
            
        );
    }

    public function relations() {
        return array(
            'prestamos' => array(self::HAS_MANY, 'Prestamo', 'Usuario'),
            'reservas' => array(self::HAS_MANY, 'Reserva', 'Usuario'),
            'rol' => array(self::BELONGS_TO, 'Rol', 'Rol'),
            
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'username' => Yii::t('app', 'Nombre de usuario'),
                'password' => Yii::t('app', 'Clave'),
                'validador_pass' => Yii::t('app', 'Repetir clave'),
                'nombres' => Yii::t('app', 'Nombre completo'),
                'email' => Yii::t('app', 'Correo electrónico'),
                'telefono' => Yii::t('app', 'Teléfono'),
                'direccion' => Yii::t('app', 'Dirección'),
                'foto' => Yii::t('app', 'Foto'),
                'id_referencia' => Yii::t('app', 'Id Referencia'),
                'Rol' => Yii::t('app', 'Rol'),
                'codigo_barra' => Yii::t('app', 'Codigo de barra'),
                'descripcion' => Yii::t('app', 'Descripción'),
                'prestamos' => null,
                'reservas' => null,
                'rol' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id, true);
        $criteria->compare('username', $this->username, true);
        $criteria->compare('password', $this->password, true);
        $criteria->compare('nombres', $this->nombres, true);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('telefono', $this->telefono);
        $criteria->compare('direccion', $this->direccion, true);
        $criteria->compare('foto', $this->foto, true);
        $criteria->compare('id_referencia', $this->id_referencia);
        $criteria->compare('Rol', $this->Rol);
        $criteria->compare('codigo_barra', $this->codigo_barra, true);
        $criteria->compare('descripcion', $this->descripcion, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}